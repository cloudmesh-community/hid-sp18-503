# swagger service for virtual directory
---
swagger: '2.0'
info:
  version: '0.0.3'
  title: 'Openstack REST Service Using Swagger'
  description: >
    A REST service that allows to create
    and mamage Virtual machines on Openstack.
    Tested on a local devstack vm
  contact:
    name: 'Cloudmesh Openstack REST service'
  license:
    name: 'Apache'

host: 'localhost:8080'
basePath: '/cloudmesh/openstack'

schemes:
  - 'http'
consumes:
  - 'application/json'
produces:
  - 'application/json'

paths:
  '/flavors':
    get:
      description: "Returns a list of all available Flavors"
      operationId: getFlavors
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'a list of available flavors'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Flavor'

  '/images':
    get:
      description: "Returns a list of all available Images"
      operationId: getImages
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'a list of available images'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Image'

  '/image/{name}':
    get:
      description: "Returns details of the image with the given name"
      produces:
        - 'application/json'
      operationId: getImageById
      parameters:
        - name: name
          in: path
          description: 'name of the image'
          required: true
          type: string
      responses:
        200:
          description: "A list of files"
          schema:
            $ref: "#/definitions/Image"

  '/servers':
    get:
      description: "Returns a List of all VMs"
      operationId: getServers
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'a list of available VMs'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Server'

  '/server/create':
    post:
      description: "Create a server with the given parameters"
      operationId: createServer
      produces:
        - 'application/json'
      parameters:
        - in: body
          name: server
          description: "object specifying server to be created"
          schema:
            $ref: "#/definitions/Server"
      responses:
        '200':
          description: 'returns the details of the server that was created'
          schema:
            $ref: '#/definitions/Server'

  '/server/start':
    post:
      description: "start a server with the given parameters"
      operationId: startServer
      produces:
        - 'application/json'
      parameters:
        - in: body
          name: server
          description: "object specifying server to be created"
          schema:
            $ref: "#/definitions/Server"
      responses:
        '200':
          description: 'returns the details of the server that was started'
          schema:
            $ref: '#/definitions/Server'

  '/server/stop':
    post:
      description: "stop a server with the given parameters"
      operationId: stopServer
      produces:
        - 'application/json'
      parameters:
        - in: body
          name: server
          description: "object specifying server to be created"
          schema:
            $ref: "#/definitions/Server"
      responses:
        '200':
          description: 'returns the details of the server that was stopped'
          schema:
            $ref: '#/definitions/Server'

  '/networks':
    get:
      description: "Returns a List of all Networks"
      operationId: getNetworks
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'a list of available Networks'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Network'

  '/networks/subnets':
    get:
      description: "Returns a List of all Subnets"
      operationId: getSubnets
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'a list of available Subnets'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Subnet'

  '/network/create':
    post:
      description: "Create a new network with the sepcified parameters"
      operationId: create_network
      produces:
        - 'application/json'
      parameters:
        - in: body
          name: network
          description: "object specifying network to be created"
          schema:
            $ref: "#/definitions/Network"
      responses:
        '200':
          description: 'returns the details of the server that was created'
          schema:
            $ref: '#/definitions/Server'

  '/keypairs':
    get:
      description: "Returns a List of available keypairs"
      operationId: getKeys
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'a list of available keypairs'
          schema:
            $ref: '#/definitions/Keypair'
definitions:
  Flavor:
    type: "object"
    required:
      - "name"
    properties:
      vcpus:
        type: "string"
      name:
        type: "string"
      id:
        type: "string"
      swap:
        type: "string"
      ram:
        type: "string"
      disk:
        type: "string"

  Server:
    type: "object"
    required:
      - "name"
      - "flavour"
      - "image"
    properties:
      name:
        type: "string"
      flavour_id:
        type: "string"
      floatingIP:
        type: "string"
      image_id:
        type: "string"
      status:
        type: "string"
      created_at:
        type: "string"
      security_groups:
        type: "array"
        items:
          type: "string"
      keypair:
        type: "string"
      network:
        type: "string"

  Image:
    type:
      "object"
    required:
      - "name"
    properties:
      name:
        type: "string"
      id:
        type: "string"
      min_ram:
        type: "string"
      min_disk:
        type: "string"
      status:
        type: "string"
      updated_at:
        type: "string"
      size:
        type: "string"
  Network:
    type: "object"
    required:
      - "name"
    properties:
      name:
        type: "string"
      id:
        type: "string"
      subnets:
        type: "array"
        items:
          type: "string"
      status:
        type: "string"
      mtu:
        type: "string"
      is_router_external:
        type: "string"
  Subnet:
    type: "object"
    required:
      - "id"
    properties:
      id:
        type "string"
      dns_nameservers:
        type: "array"
        items:
          type: "string"

      project_id:
        type: "string"
      name:
        type: "string"
      is_dhcp_enabled:
        type: "string"
  Keypair:
    type: "object"
    required:
      - "name"
    properties:
      name:
        type: "string"
      public_key:
        type: "string"
      private_key:
        type: "string"
